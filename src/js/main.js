// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import "lazysizes";
import "./components/toTopButton.js";
import { initVideoModal } from "./components/modalVideo.js";
import { initGalleryModal } from "./components/modalGallery.js";
import { initFormsModals } from "./components/formsModals.js";

import { loadComponent } from "./components/loadComponents.js";
import { MobileMenu } from "./components/mobileMenu.js";
import { initRouter } from "./components/router.js";

// –ò–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç—ã
import { initMap, destroyMap } from "./components/map.js";

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–¥–µ–æ–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
window.initVideoModal = initVideoModal;
window.initGalleryModal = initGalleryModal;

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
window.initMap = initMap;
window.destroyMap = destroyMap;

// –î–µ–ª–∞–µ–º initForms –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
import { initForms } from "./components/forms.js";
window.initForms = initForms;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
import /* re-exported in router */ "./components/router.js";
window.sanitizeHTML = window.sanitizeHTML || ((html) => html);

// ========== BREADCRUMBS (–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏) ==========

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç BreadcrumbList —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
function generateBreadcrumbs() {
  const currentPath = window.location.pathname;
  const baseUrl = window.location.origin;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º basePath –∏–∑ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
  const basePath =
    window.basePath ||
    (window.location.hostname.includes("github.io") ? "/AQUANIKA" : "");

  // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const breadcrumbs = [
    {
      "@type": "ListItem",
      position: 1,
      name: "–ì–ª–∞–≤–Ω–∞—è",
      item: `${baseUrl}${basePath}/`,
    },
  ];

  let position = 2;

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  if (currentPath === `${basePath}/` || currentPath === "/") {
    return createBreadcrumbScript(breadcrumbs);
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const topLevelPages = {
    "/about": "–û –Ω–∞—Å",
    "/team": "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞",
    "/reviews": "–û—Ç–∑—ã–≤—ã",
    "/price": "–¶–µ–Ω—ã",
    "/gallery": "–ì–∞–ª–µ—Ä–µ—è",
    "/vacancies": "–í–∞–∫–∞–Ω—Å–∏–∏",
    "/contacts": "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
    "/privacy": "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
  };

  // –£—Å–ª—É–≥–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const serviceCategories = {
    "/services/spa": "SPA –∏ –º–∞—Å—Å–∞–∂",
    "/services/epilation": "–≠–ø–∏–ª—è—Ü–∏—è",
    "/services/brows": "–ë—Ä–æ–≤–∏ –∏ —Ä–µ—Å–Ω–∏—Ü—ã",
    "/services/nails": "–ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä",
    "/services/cosmetology": "–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π",
    "/services/hairdressing": "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
    "/services/makeup": "–ú–∞–∫–∏—è–∂",
    "/services/men": "–î–ª—è –º—É–∂—á–∏–Ω",
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  for (const [path, name] of Object.entries(topLevelPages)) {
    if (currentPath.includes(path)) {
      breadcrumbs.push({
        "@type": "ListItem",
        position: position,
        name: name,
        item: `${baseUrl}/AQUANIKA${path}`,
      });
      return createBreadcrumbScript(breadcrumbs);
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
  for (const [categoryPath, categoryName] of Object.entries(
    serviceCategories
  )) {
    if (currentPath.includes(categoryPath)) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      breadcrumbs.push({
        "@type": "ListItem",
        position: position++,
        name: categoryName,
        item: `${baseUrl}/AQUANIKA${categoryPath}`,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É –µ—Å–ª–∏ –µ—Å—Ç—å
      const servicePages = getServicePages(categoryPath);
      for (const [servicePath, serviceName] of Object.entries(servicePages)) {
        if (currentPath.includes(servicePath)) {
          breadcrumbs.push({
            "@type": "ListItem",
            position: position,
            name: serviceName,
            item: `${baseUrl}/AQUANIKA${servicePath}`,
          });
          break;
        }
      }

      return createBreadcrumbScript(breadcrumbs);
    }
  }

  return null;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getServicePages(categoryPath) {
  const services = {
    "/services/spa": {
      "/services/aquanika": '–ü–í–ú "–ê–∫–≤–∞–Ω–∏–∫–∞"',
      "/services/massage": "–ú–∞—Å—Å–∞–∂",
      "/services/wrapping": "–û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ",
    },
    "/services/epilation": {
      "/services/epilation/laser": "–õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è",
      "/services/epilation/sugaring": "–®—É–≥–∞—Ä–∏–Ω–≥",
    },
    "/services/brows": {
      "/services/brows/architecture": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±—Ä–æ–≤–µ–π",
      "/services/brows/extensions": "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
    },
    "/services/nails": {
      "/services/nails/manicure": "–ú–∞–Ω–∏–∫—é—Ä",
      "/services/nails/pedicure": "–ü–µ–¥–∏–∫—é—Ä",
      "/services/nails/extensions": "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π",
    },
    "/services/cosmetology": {
      "/services/cosmetology/face-care": "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
      "/services/cosmetology/injections": "–ò–Ω—ä–µ–∫—Ü–∏–∏",
      "/services/cosmetology/tattoo-removal": "–í—ã–≤–µ–¥–µ–Ω–∏–µ —Ç–∞—Ç—É–∞–∂–∞",
    },
    "/services/hairdressing": {
      "/services/hairdressing/haircuts": "–°—Ç—Ä–∏–∂–∫–∏",
      "/services/hairdressing/coloring": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ",
      "/services/hairdressing/styling": "–£–∫–ª–∞–¥–∫–∏",
    },
    "/services/men": {
      "/services/men/haircut": "–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞",
      "/services/men/epilation": "–ú—É–∂—Å–∫–∞—è —ç–ø–∏–ª—è—Ü–∏—è",
      "/services/men/manicure": "–ú—É–∂—Å–∫–æ–π –º–∞–Ω–∏–∫—é—Ä",
    },
  };

  return services[categoryPath] || {};
}

/**
 * –°–æ–∑–¥–∞–µ—Ç script —ç–ª–µ–º–µ–Ω—Ç —Å structured data
 */
function createBreadcrumbScript(breadcrumbs) {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ breadcrumbs –µ—Å–ª–∏ –µ—Å—Ç—å
  const oldScript = document.querySelector(
    'script[type="application/ld+json"][data-breadcrumbs]'
  );
  if (oldScript) {
    oldScript.remove();
  }

  const breadcrumbData = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    itemListElement: breadcrumbs,
  };

  const script = document.createElement("script");
  script.type = "application/ld+json";
  script.setAttribute("data-breadcrumbs", "true");
  script.textContent = JSON.stringify(breadcrumbData, null, 2);

  return script;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function createVisualBreadcrumbs() {
  const breadcrumbScript = document.querySelector(
    'script[type="application/ld+json"][data-breadcrumbs]'
  );
  if (!breadcrumbScript) return;

  const data = JSON.parse(breadcrumbScript.textContent);
  const items = data.itemListElement;

  const breadcrumbNav = document.createElement("nav");
  breadcrumbNav.setAttribute("aria-label", "–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏");
  breadcrumbNav.className = "breadcrumbs";

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã
  const breadcrumbContainer = document.createElement("div");
  breadcrumbContainer.className = "container";

  const ol = document.createElement("ol");
  ol.className = "breadcrumbs__list";

  items.forEach((item, index) => {
    const li = document.createElement("li");
    li.className = "breadcrumbs__item";

    if (index === items.length - 1) {
      // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      const currentSpan = document.createElement("span");
      currentSpan.className = "breadcrumbs__current";
      currentSpan.setAttribute("aria-current", "page");
      currentSpan.textContent = item.name;
      li.appendChild(currentSpan);
    } else {
      // –°—Å—ã–ª–∫–∞ - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      const link = document.createElement("a");
      link.href = item.item;
      link.className = "breadcrumbs__link";
      link.textContent = item.name;
      li.appendChild(link);
    }

    ol.appendChild(li);
  });

  breadcrumbContainer.appendChild(ol);
  breadcrumbNav.appendChild(breadcrumbContainer);

  // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ö–µ–¥–µ—Ä–∞ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ main
  const header = document.querySelector("header");
  const main = document.querySelector("main");

  if (header && main) {
    main.insertBefore(breadcrumbNav, main.firstChild);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
 */
function initBreadcrumbs() {
  const breadcrumbScript = generateBreadcrumbs();
  if (breadcrumbScript) {
    document.head.appendChild(breadcrumbScript);
    console.log("üçû Breadcrumbs initialized");

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    createVisualBreadcrumbs();
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ breadcrumbs –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
window.initBreadcrumbs = initBreadcrumbs;
window.generateBreadcrumbs = generateBreadcrumbs;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è basePath –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å —Ä–æ—É—Ç–µ—Ä–æ–º
window.basePath = window.location.hostname.includes("github.io")
  ? "/AQUANIKA"
  : "";

// ========== –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –†–§ ==========

// Cookie banner ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –±–µ–∑ innerHTML
function injectCookieBannerStyles() {
  if (document.getElementById("cookieBannerStyles")) return;
  const style = document.createElement("style");
  style.id = "cookieBannerStyles";
  style.textContent = `
  .cookie-banner { 
    position: fixed; 
    left: 16px; 
    right: 16px; 
    bottom: 16px; 
    z-index: 1100; 
    display: flex; 
    gap: 16px; 
    align-items: flex-start; 
    padding: 16px; 
    background: var(--color-background, #fff); 
    color: var(--color-dark, #222); 
    border: 1px solid var(--color-border, #e0e0e0); 
    border-radius: 12px; 
    box-shadow: var(--shadow-lg, 0 10px 30px rgba(0,0,0,.15)); 
    max-width: 960px; 
    margin: 0 auto; 
  }
  .cookie-banner__text { 
    flex: 1; 
    line-height: 1.5; 
    font-size: 14px; 
  }
  .cookie-banner__actions { 
    display: flex; 
    gap: 12px; 
    flex-wrap: wrap; 
  }
  .cookie-banner__link { 
    color: var(--color-secondary, #a78b3d); 
    text-decoration: underline; 
  }
  .cookie-banner__btn { 
    white-space: nowrap; 
  }
  .consent-checkbox {
    margin: 10px 0;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #e9ecef;
  }
  .consent-checkbox label {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    font-size: 13px;
    cursor: pointer;
    line-height: 1.4;
  }
  .consent-checkbox input[type="checkbox"] {
    margin-top: 2px;
    flex-shrink: 0;
  }
  .form-consent {
    margin: 15px 0;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 6px;
    border-left: 4px solid #007bff;
  }
  .form-consent label {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    font-size: 14px;
    cursor: pointer;
    line-height: 1.4;
  }
  .form-consent input[type="checkbox"] {
    margin-top: 2px;
    flex-shrink: 0;
  }
  @media (max-width: 640px){ 
    .cookie-banner{ 
      flex-direction: column; 
      gap: 12px; 
      padding: 12px; 
    }
    .cookie-banner__actions {
      width: 100%;
      justify-content: stretch;
    }
    .cookie-banner__btn {
      flex: 1;
      min-width: 120px;
    }
  }
  `;
  document.head.appendChild(style);
}

function buildCookieBanner() {
  if (document.getElementById("cookieBanner")) return;

  const banner = document.createElement("div");
  banner.id = "cookieBanner";
  banner.className = "cookie-banner";
  banner.setAttribute("role", "region");
  banner.setAttribute("aria-label", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ cookies");

  const text = document.createElement("p");
  text.className = "cookie-banner__text";

  const span1 = document.createElement("span");
  span1.textContent = "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã cookie –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞. ";

  const link = document.createElement("a");
  link.className = "cookie-banner__link";
  link.href = "/privacy";
  link.textContent = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏";
  link.setAttribute("rel", "noopener");
  link.setAttribute("target", "_self");

  const span2 = document.createElement("span");
  span2.textContent = ".";

  text.append(span1, link, span2);

  const actions = document.createElement("div");
  actions.className = "cookie-banner__actions";

  const acceptBtn = document.createElement("button");
  acceptBtn.className = "button button--primary cookie-banner__btn";
  acceptBtn.type = "button";
  acceptBtn.textContent = "–ü—Ä–∏–Ω—è—Ç—å";
  acceptBtn.addEventListener("click", () => {
    try {
      localStorage.setItem("cookieConsent", "accepted");
      localStorage.setItem("cookieConsentDate", new Date().toISOString());
    } catch (_) {}
    banner.remove();
    initAnalytics();
  });

  const rejectBtn = document.createElement("button");
  rejectBtn.className = "button button--secondary cookie-banner__btn";
  rejectBtn.type = "button";
  rejectBtn.textContent = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å";
  rejectBtn.addEventListener("click", () => {
    try {
      localStorage.setItem("cookieConsent", "rejected");
    } catch (_) {}
    banner.remove();
  });

  actions.append(acceptBtn, rejectBtn);
  banner.append(text, actions);
  document.body.appendChild(banner);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è)
function initAnalytics() {
  console.log("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)");

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
  // –ü—Ä–∏–º–µ—Ä –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏:
  /*
  if (typeof ym !== 'undefined') {
    ym(12345678, 'init', {
      clickmap: true,
      trackLinks: true,
      accurateTrackBounce: true
    });
  }
  */
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –≤ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function addConsentToForms() {
  const forms = document.querySelectorAll("form:not([data-no-consent])");

  forms.forEach((form) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —á–µ–∫–±–æ–∫—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è
    if (!form.querySelector('input[name="personal-data-consent"]')) {
      const consentDiv = document.createElement("div");
      consentDiv.className = "form-consent";

      const consentLabel = document.createElement("label");
      const consentCheckbox = document.createElement("input");
      consentCheckbox.type = "checkbox";
      consentCheckbox.name = "personal-data-consent";
      consentCheckbox.required = true;

      const consentText = document.createElement("span");

      const textNode1 = document.createTextNode(
        "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å "
      );
      const link = document.createElement("a");
      link.href = "/privacy";
      link.target = "_blank";
      link.textContent = "–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏";
      link.style.color = "#007bff";
      const textNode2 = document.createTextNode("");

      consentText.appendChild(textNode1);
      consentText.appendChild(link);
      consentText.appendChild(textNode2);

      consentLabel.appendChild(consentCheckbox);
      consentLabel.appendChild(consentText);
      consentDiv.appendChild(consentLabel);

      // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–µ–π
      const submitBtn = form.querySelector(
        'button[type="submit"], input[type="submit"]'
      );
      if (submitBtn) {
        submitBtn.parentNode.insertBefore(consentDiv, submitBtn);
      } else {
        form.appendChild(consentDiv);
      }
    }
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º —Å —Å–æ–≥–ª–∞—Å–∏–µ–º
function initFormValidation() {
  document.addEventListener("submit", function (e) {
    const form = e.target;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–∏—è
    if (form.hasAttribute("data-no-consent")) return;

    const consentCheckbox = form.querySelector(
      'input[name="personal-data-consent"]'
    );

    if (consentCheckbox && !consentCheckbox.checked) {
      e.preventDefault();
      alert(
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
      );
      consentCheckbox.focus();
      consentCheckbox.scrollIntoView({ behavior: "smooth", block: "center" });
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function checkLegalRequirements() {
  const requirements = {
    privacyPage: !!document.querySelector('a[href*="privacy"]'),
    formsWithConsent: document.querySelectorAll(
      'input[name="personal-data-consent"]'
    ).length,
    cookieBanner: !!document.getElementById("cookieBanner"),
    hasLegalInfo: !!document.querySelector(
      '.legal-info, [class*="requisites"], [class*="—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"]'
    ),
  };

  console.log("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:", requirements);

  if (!requirements.privacyPage) {
    console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏");
  }

  if (!requirements.hasLegalInfo) {
    console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã)");
  }

  return requirements;
}

function initCookieBanner() {
  try {
    if (localStorage.getItem("cookieConsent") === "accepted") {
      initAnalytics(); // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ —Å–æ–≥–ª–∞—Å–∏–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      return;
    }
  } catch (_) {}

  injectCookieBannerStyles();
  buildCookieBanner();
}

// ========== –ö–û–ù–ï–¶ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô ==========

// –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ header/footer
async function loadLayoutComponents() {
  try {
    if (document.getElementById("header-placeholder")) {
      await loadComponent(
        "header-placeholder",
        "/components/partials/header.html"
      );
    }
    if (document.getElementById("footer-placeholder")) {
      await loadComponent(
        "footer-placeholder",
        "/components/partials/footer.html"
      );
    }
  } catch (error) {
    console.warn("Layout components loading failed:", error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function initContactsPage() {
  const currentPath = window.location.pathname;
  const isContactsPage =
    currentPath.includes("/contacts") || document.getElementById("map");

  if (isContactsPage) {
    console.log("üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤");
    // –î–∞–µ–º –≤—Ä–µ–º—è DOM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–æ—É—Ç–∏–Ω–≥–∞
    setTimeout(() => {
      initMap();
    }, 100);
  } else {
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    destroyMap();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", async () => {
  console.log(
    "üöÄ AQUANIKA loaded in",
    window.location.hostname.includes("github.io")
      ? "GitHub Pages"
      : window.location.hostname === "localhost"
      ? "Local development"
      : "Production",
    "mode"
  );

  // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BREADCRUMBS ==========
  try {
    initBreadcrumbs();
  } catch (e) {
    console.warn("Breadcrumbs initialization failed", e);
  }
  // ========== –ö–û–ù–ï–¶ BREADCRUMBS ==========

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  await Promise.all([
    loadLayoutComponents(),
    new Promise((resolve) => {
      new MobileMenu();
      resolve();
    }),
  ]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã (sidebar, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –º–æ–±.–º–µ–Ω—é)
  try {
    initFormsModals();
  } catch (e) {
    console.warn("initFormsModals failed", e);
  }

  // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô ==========
  try {
    initCookieBanner();
  } catch (e) {
    console.warn("initCookieBanner failed", e);
  }

  try {
    addConsentToForms();
    initFormValidation();
  } catch (e) {
    console.warn("Form consent initialization failed", e);
  }

  try {
    checkLegalRequirements();
  } catch (e) {
    console.warn("Legal requirements check failed", e);
  }
  // ========== –ö–û–ù–ï–¶ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –Æ–†–ò–î–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô ==========

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  initContactsPage();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
  initRouter();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
window.addEventListener("popstate", () => {
  setTimeout(() => {
    initContactsPage();
  }, 50);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
  initCookieBanner,
  addConsentToForms,
  initFormValidation,
  checkLegalRequirements,
  initMap,
  destroyMap,
};
